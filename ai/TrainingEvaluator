import logging
import os.path
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
import ai.RubiksDataset as Data
import time
import tensorflow as tf
from datetime import timedelta
from keras import Sequential
from keras.layers import InputLayer, Dense, Dropout
from keras.regularizers import l2
import matplotlib.pyplot as plot

def create_model():
    new_model = Sequential()
    new_model.add(InputLayer(324))
    new_model.add(Dense(324, activation='relu', kernel_regularizer=l2(0.001)))
    new_model.add(Dropout(0.3))
    new_model.add(Dense(228, activation='relu', kernel_regularizer=l2(0.001)))
    new_model.add(Dropout(0.3))
    new_model.add(Dense(12, activation='softmax'))
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.0001)
    new_model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    new_model.summary()
    return new_model

def plot_history(history):
    figure, axis = plot.subplots()

    axis.plot(history.history['accuracy'], label="Training Accuracy")
    axis.plot(history.history['val_accuracy'], label="Validation Accuracy")
    axis.set_ylabel("Accuracy")
    axis.legend(loc="lower right")
    axis.set_title("Accuracy Evaluation")

    plot.show()

if __name__ == '__main__':
    NUM_SCRAMBLES = 5
    BATCH_SIZE = 1000
    NUM_EPOCHS = 100
    EVALUATION_SIZE = 1000

    model = create_model()

    logging.getLogger('tensorflow').disabled = True
    print("\nThere are approximately {} permutations for {} scrambles.\n".format(12 * pow(11, NUM_SCRAMBLES - 1), NUM_SCRAMBLES))

    start_time = time.time()
    print("Fitting Model")
    train_x, train_y = Data.create_training_data(BATCH_SIZE, NUM_SCRAMBLES)
    test_x, test_y = Data.create_training_data(EVALUATION_SIZE, NUM_SCRAMBLES)
    hist = model.fit(train_x, train_y, epochs=NUM_EPOCHS, verbose=1, validation_data=(test_x, test_y))
    print("Running Time {}".format(timedelta(seconds=time.time() - start_time)))
    print("Training Completed in {}".format(timedelta(seconds=time.time() - start_time)))
    plot_history(hist)
